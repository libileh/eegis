// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO
    comments (
        id,
        content,
        post_id,
        user_id,
        created_at
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING
    id
`

type CreateCommentParams struct {
	ID        uuid.UUID
	Content   string
	PostID    uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.Content,
		arg.PostID,
		arg.UserID,
		arg.CreatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getCommentsByPostID = `-- name: GetCommentsByPostID :many
SELECT 
    c.id,
    c.post_id,
    c.user_id as commentUserId,
    c.content,
    c.created_at,
    u.username,
    u.id as userId
FROM comments c
INNER JOIN users u ON u.id = c.user_id
WHERE c.post_id = $1
ORDER BY c.created_at DESC
`

type GetCommentsByPostIDRow struct {
	ID            uuid.UUID
	PostID        uuid.UUID
	Commentuserid uuid.UUID
	Content       string
	CreatedAt     time.Time
	Username      string
	Userid        uuid.UUID
}

func (q *Queries) GetCommentsByPostID(ctx context.Context, postID uuid.UUID) ([]GetCommentsByPostIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPostIDRow
	for rows.Next() {
		var i GetCommentsByPostIDRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Commentuserid,
			&i.Content,
			&i.CreatedAt,
			&i.Username,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
