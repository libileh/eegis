// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id,
                   username,
                   password,
                   email,
                   created_at,
                   role_id)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING
    id, username, password, email, created_at, is_active, role_id
`

type CreateUserParams struct {
	ID        uuid.UUID
	Username  string
	Password  []byte
	Email     string
	CreatedAt time.Time
	RoleID    int16
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.CreatedAt,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}

const createUserInvitation = `-- name: CreateUserInvitation :one
INSERT INTO users_invitations(token, user_id, expiry)
VALUES ($1, $2, $3) RETURNING token, user_id, expiry
`

type CreateUserInvitationParams struct {
	Token  string
	UserID uuid.UUID
	Expiry time.Time
}

func (q *Queries) CreateUserInvitation(ctx context.Context, arg CreateUserInvitationParams) (UsersInvitation, error) {
	row := q.db.QueryRowContext(ctx, createUserInvitation, arg.Token, arg.UserID, arg.Expiry)
	var i UsersInvitation
	err := row.Scan(&i.Token, &i.UserID, &i.Expiry)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserInvitation = `-- name: DeleteUserInvitation :exec
DELETE FROM users_invitations WHERE user_id=$1
`

func (q *Queries) DeleteUserInvitation(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserInvitation, userID)
	return err
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, username, email, password, created_at, is_active, role_id
FROM users
WHERE email=$1 and is_active=true
`

type GetByEmailRow struct {
	ID        uuid.UUID
	Username  string
	Email     string
	Password  []byte
	CreatedAt time.Time
	IsActive  bool
	RoleID    int16
}

func (q *Queries) GetByEmail(ctx context.Context, email string) (GetByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getByEmail, email)
	var i GetByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password, email, created_at, is_active, role_id
FROM users
WHERE email = $1
  AND is_active = true
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, email, created_at, is_active, role_id
FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}

const getUserFromUserInvitation = `-- name: GetUserFromUserInvitation :one
SELECT u.id, u.username, u.password, u.email, u.created_at, u.is_active, u.role_id
FROM users u
         JOIN users_invitations ui
              ON u.id = ui.user_id
WHERE ui.token = $1
`

func (q *Queries) GetUserFromUserInvitation(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromUserInvitation, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username=$1,
    password=$2,
    email=$3,
    is_active=$4
WHERE id = $5
RETURNING id, username, password, email, created_at, is_active, role_id
`

type UpdateUserParams struct {
	Username string
	Password []byte
	Email    string
	IsActive bool
	ID       uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.IsActive,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}
