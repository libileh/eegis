// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: topics.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTopic = `-- name: CreateTopic :one
INSERT INTO topics (id,
                    name,
                    description,
                    created_at)
VALUES ($1, $2, $3, $4) RETURNING
    id, created_at
`

type CreateTopicParams struct {
	ID          uuid.UUID
	Name        string
	Description string
	CreatedAt   time.Time
}

type CreateTopicRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) CreateTopic(ctx context.Context, arg CreateTopicParams) (CreateTopicRow, error) {
	row := q.db.QueryRowContext(ctx, createTopic,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
	)
	var i CreateTopicRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const followTopic = `-- name: FollowTopic :exec
INSERT INTO topic_users (topic_id, user_id, followed_at)
VALUES ($1, $2, $3)
`

type FollowTopicParams struct {
	TopicID    uuid.UUID
	UserID     uuid.UUID
	FollowedAt time.Time
}

func (q *Queries) FollowTopic(ctx context.Context, arg FollowTopicParams) error {
	_, err := q.db.ExecContext(ctx, followTopic, arg.TopicID, arg.UserID, arg.FollowedAt)
	return err
}

const getAllTopics = `-- name: GetAllTopics :many
SELECT id, name, description, created_at
FROM topics
`

func (q *Queries) GetAllTopics(ctx context.Context) ([]Topic, error) {
	rows, err := q.db.QueryContext(ctx, getAllTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopicById = `-- name: GetTopicById :one
SELECT id, name, description, created_at
FROM topics
WHERE id = $1
`

func (q *Queries) GetTopicById(ctx context.Context, id uuid.UUID) (Topic, error) {
	row := q.db.QueryRowContext(ctx, getTopicById, id)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getTopicByName = `-- name: GetTopicByName :one
SELECT id, name, description, created_at
FROM topics
WHERE name = $1
`

func (q *Queries) GetTopicByName(ctx context.Context, name string) (Topic, error) {
	row := q.db.QueryRowContext(ctx, getTopicByName, name)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getUserFollowedTopics = `-- name: GetUserFollowedTopics :many
SELECT t.id, t.name, t.description, t.created_at
FROM topic_users tu
         JOIN topics t ON tu.topic_id = t.id
WHERE tu.user_id = $1
`

func (q *Queries) GetUserFollowedTopics(ctx context.Context, userID uuid.UUID) ([]Topic, error) {
	rows, err := q.db.QueryContext(ctx, getUserFollowedTopics, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowTopic = `-- name: UnfollowTopic :exec
DELETE FROM topic_users
WHERE topic_id = $1 AND user_id = $2
`

type UnfollowTopicParams struct {
	TopicID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) UnfollowTopic(ctx context.Context, arg UnfollowTopicParams) error {
	_, err := q.db.ExecContext(ctx, unfollowTopic, arg.TopicID, arg.UserID)
	return err
}

const updateTopic = `-- name: UpdateTopic :one
UPDATE topics
SET name        = $2,
    description = $3
WHERE id = $1 RETURNING
    id, name, description, created_at
`

type UpdateTopicParams struct {
	ID          uuid.UUID
	Name        string
	Description string
}

func (q *Queries) UpdateTopic(ctx context.Context, arg UpdateTopicParams) (Topic, error) {
	row := q.db.QueryRowContext(ctx, updateTopic, arg.ID, arg.Name, arg.Description)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
